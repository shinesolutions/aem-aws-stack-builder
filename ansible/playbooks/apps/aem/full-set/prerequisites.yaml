---

- name: AEM Apps Prerequisite Resources Creation and Deletion Tasks
  hosts: all
  gather_facts: no
  connection: local

  tasks:

    - name: Ensure data bucket exists
      s3_bucket:
        region: "{{ aws.region }}"
        name: "{{ s3.data_bucket_name }}"
        state: present
      tags:
      - create

    - name: Upload CloudFormation Templates to S3
      command: >
              aws s3 sync ../../../../../cloudformation/apps/aem/full-set
                  s3://{{ s3.data_bucket_name }}/{{ stack_prefix }}
                  --include "*.yaml" --acl public-read
      tags:
        - create

    - name: Create AEM App Prerequisite Resources Stack
      cloudformation:
        stack_name: "{{ stack_prefix }}-{{ prerequisites.stack_name }}"
        region: "{{ aws.region }}"
        state: present
        disable_rollback: true
        template: "../../../../../cloudformation/apps/aem/full-set/prerequisites.yaml"
        template_parameters:
          PrerequisitesStackPrefixParameter: "{{ stack_prefix }}"
          NetworkStackPrefixParameter: "{{ network_stack_prefix }}"
          DataBucketNameParameter: "{{ s3.data_bucket_name }}"
          SecureShellInboundCidrIpParameter: "{{ security_groups.secure_shell.inbound_cidr_ip }}"
          PublishDispatcherELBSecurityGroupInboundCidrIpParameter: "{{ security_groups.publish_dispatcher_elb.inbound_cidr_ip }}"
          AuthorDispatcherELBSecurityGroupInboundCidrIpParameter: "{{ security_groups.author_dispatcher_elb.inbound_cidr_ip }}"
          PrivateSubnetInternetOutboundCidrIpParameter: "{{ security_groups.private_subnet_internet_outbound_cidr_ip }}"
          AEMASGEventQueueNameParameter: "{{ stack_prefix }}-{{ messaging.asg_event_sqs_queue_name }}"
          AEMASGEventTopicDisplayNameParameter: "{{ stack_prefix }} - {{ messaging.asg_event_sns_topic_display_name }}"
          AEMASGEventTopicNameParameter: "{{ stack_prefix }}-{{ messaging.asg_event_sns_topic_name }}"
          AEMCWEventNotificationEmail: "{{ messaging.alarm_notification.contact_email }}"
          SSLCertificateARNParameter: "{{ certificate_manager.ssl_certificate_arn }}"
        tags:
          - create
        when:
          permission_type == "b"

    - name: Create AEM App Prerequisite Resources Stack with Permissions Type C
      cloudformation:
        stack_name: "{{ stack_prefix }}-{{ prerequsites.stack.name }}"
        region: "{{ aws.region }}"
        state: present
        disable_rollback: true
        template: "../../../../../cloudformation/apps/aem/full-set/prerequisites-{{ permission_type }}.yaml"
        template_parameters:
          PrerequisitesStackPrefixParameter: "{{ stack_prefix }}"
          NetworkStackPrefixParameter: "{{ networks_stack_prefix }}"
          DataBucketNameParameter: "{{ s3.data_bucket_name }}"
          SecureShellInboundCidrIpParameter: "{{ security_groups.secure_shell.inbound_cidr_ip }}"
          PublishDispatcherELBSecurityGroupInboundCidrIpParameter: "{{ security_groups.publish_dispatcher_elb.inbound_cidr_ip }}"
          AuthorDispatcherELBSecurityGroupInboundCidrIpParameter: "{{ security_groups.author_dispatcher_elb.inbound_cidr_ip }}"
          PrivateSubnetInternetOutboundCidrIpParameter: "{{ security_groups.private_subnet_internet_outbound_cidr_ip }}"
          AEMASGEventQueueNameParameter: "{{ stack_prefix }}-{{ messaging.asg_event_sqs_queue_name }}"
          AEMASGEventTopicDisplayNameParameter: "{{ stack_prefix }} - {{ messaging.asg_event_sns_topic_display_name }}"
          AEMASGEventTopicNameParameter: "{{ stack_prefix }}-{{ messaging.asg_event_sns_topic_name }}"
          AEMCWEventNotificationEmail: "{{ messaging.alarm_notification.contact_email }}"
          SSLCertificateARNParameter: "{{ certificate_manager.ssl_certificate_arn }}"
          AEMStackManagerSnapshotLambdaServiceRoleArnParameter: "{{ stack_manager.snapshot_lambda_service_role_arn }}"
          AEMStackManagerSnapshotLambdaServiceRoleNameParameter: "{{ stack_manager.snapshot_lambda_service_role_name }}"
          AuthorDispatcherInstanceProfileParameter: "{{ author_dispatcher.instance_profile }}"
          AuthorInstanceProfileParameter: "{{ author.instance_profile }}"
          ChaosMonkeyInstanceProfileParameter: "{{ chaos_monkey.instance_profile }}"
          OrchestratorInstanceProfileParameter: "{{ orchestrator.instance_profile }}"
          PublishDispatcherInstanceProfileParameter: "{{ publish_dispatcher.instance_profile }}"
          PublishInstanceProfileParameter: "{{ publish.instance_profile }}"
        tags:
          - create
        when:
          permission_type == "c"

      
    - name: Check if a Stack Exists
      command: >
        aws cloudformation describe-stacks --stack-name "{{ stack_prefix }}-{{ prerequisites.stack_name }}"
             --query 'Stacks[].StackName' --region "{{ aws.region }}"
      ignore_errors: True
      register: stack_query
      tags:
        - delete

    - name: Report Stack Problem
      debug:
        msg: Stack "{{ stack_prefix }}-{{ prerequisites.stack_name }}" does not exist or some other errors occured
      when:
        "stack_query.rc != 0"
      tags:
        - delete

    - name: Delete AEM App Prerequisite Resources Stacks
      cloudformation:
        stack_name: "{{ stack_prefix }}-{{ prerequisites.stack_name }}"
        region: "{{ aws.region }}"
        state: absent
      when:
        "stack_query.rc == 0"
      tags:
      - delete

    - name: Delete All Stack Data
      command: >
              aws s3 rm s3://"{{ s3.data_bucket_name }}"/"{{ stack_prefix }}"
               --recursive --region "{{ aws.region }}"
      tags:
      - delete
