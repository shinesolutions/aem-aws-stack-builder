---
- name: AEM Stack Data Tasks
  hosts: all
  gather_facts: no
  connection: local

  tasks:
    - name: Check if compute stack exists
      command: >
        aws cloudformation describe-stacks --stack-name "{{ stack_prefix }}-{{ main.stack_name }}"
            --query 'Stacks[].StackName' --region "{{ aws.region }}"
      ignore_errors: True
      register: stack_query
      tags:
        - always

    - name: Ensure stage directory exists
      file:
        path: ../../../../stage
        state: directory
        mode: 0755
      tags:
      - create

    - name: Inspect content of data bucket
      aws_s3:
        bucket: "{{ s3.data_bucket_name }}"
        prefix: "{{ stack_prefix }}"
        region: "{{ aws.region }}"
        mode: list
      tags:
        - create

    - name: Generate random credentials for system users
      system_users_credentials:
        enable_default_passwords: "{{ aem.enable_default_passwords }}"
      register: system_users_credentials
      no_log: True
      when: "stack_query.rc != 0"
      tags:
        - create

    - name: Create temporary file containing generated credentials
      copy:
        content: "{{ system_users_credentials.meta }}"
        dest: ../../../../../stage/system-users-credentials.json
      when: "stack_query.rc != 0"
      tags:
        - create

    - name: Upload system user credentials
      aws_s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}/system-users-credentials.json"
        src: ../../../../../stage/system-users-credentials.json
        mode: put
        encrypt: yes
      when: "stack_query.rc != 0"
      tags:
        - create

    - name: Generate stack Facter facts
      stack_facter_facts:
        stack_prefix: "{{ stack_prefix }}"
        cron_env_path: "{{ cron.env_path }}"
        cron_http_proxy: "{{ cron.http_proxy }}"
        cron_https_proxy: "{{ cron.https_proxy }}"
        cron_no_proxy: "{{ cron.no_proxy }}"
        publish_dispatcher_allowed_client: "{{ publish_dispatcher.allowed_client }}"
      register: stack_facter_facts
      tags:
      - create

    - name: Create custom file containing generated stack Facter facts
      copy:
        content: "{{ stack_facter_facts.meta }}"
        dest: ../../../../../stage/stack-facts.txt
      tags:
      - create

    - name: Upload stack Facter facts
      aws_s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}/stack-facts.txt"
        src: ../../../../../stage/stack-facts.txt
        mode: put
        encrypt: yes
      tags:
      - create

    - name: Upload stack init script
      aws_s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}/stack-init.sh"
        src: ../../../../../scripts/stack-init.sh
        mode: put
      tags:
      - create

    - name: Copy deploy-artifacts-descriptor from source bucket to data bucket when source stack is specified
      s3_copy_object:
        src_bucket: "{{ s3.data_bucket_name }}"
        src_key: "{{ source_stack_prefix }}/deploy-artifacts-descriptor.json"
        dest_bucket: "{{ s3.data_bucket_name }}"
        dest_key: "{{ stack_prefix }}/deploy-artifacts-descriptor.json"
      when: not((source_stack_prefix is undefined) or (source_stack_prefix is none) or (source_stack_prefix | trim == ''))
      tags:
      - create

    - name: Check deploy-artifacts-descriptor existence
      stat:
        path: ../../../../../stage/deploy-artifacts-descriptor.json
      register: deploy_artifacts_descriptor_stat_result
      tags:
      - create

    - name: Upload deploy-artifacts-descriptor from stage directory to data bucket when supplied
      aws_s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}/deploy-artifacts-descriptor.json"
        src: ../../../../../stage/deploy-artifacts-descriptor.json
        mode: put
      when: deploy_artifacts_descriptor_stat_result.stat.exists == True
      tags:
      - create

    - name: Copy export-backups-descriptor from source bucket to data bucket
      s3_copy_object:
        src_bucket: "{{ s3.data_bucket_name }}"
        src_key: "{{ source_stack_prefix }}/export-backups-descriptor.json"
        dest_bucket: "{{ s3.data_bucket_name }}"
        dest_key: "{{ stack_prefix }}/export-backups-descriptor.json"
      when: not((source_stack_prefix is undefined) or (source_stack_prefix is none) or (source_stack_prefix | trim == ''))
      tags:
      - create

    - name: Check export-backups-descriptor existence
      stat:
        path: ../../../../../stage/export-backups-descriptor.json
      register: export_backups_descriptor_stat_result
      tags:
      - create

    - name: Upload export-backups-descriptor from stage directory to data bucket when supplied
      aws_s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}/export-backups-descriptor.json"
        src: ../../../../../stage/export-backups-descriptor.json
        mode: put
      when: export_backups_descriptor_stat_result.stat.exists == True
      tags:
      - create

    - name: Copy content-healthcheck-descriptor from source bucket to data bucket
      s3_copy_object:
        src_bucket: "{{ s3.data_bucket_name }}"
        src_key: "{{ source_stack_prefix }}/content-healthcheck-descriptor.json"
        dest_bucket: "{{ s3.data_bucket_name }}"
        dest_key: "{{ stack_prefix }}/content-healthcheck-descriptor.json"
      when: not((source_stack_prefix is undefined) or (source_stack_prefix is none) or (source_stack_prefix | trim == ''))
      tags:
      - create

    - name: Check content-healthcheck-descriptor existence
      stat:
        path: ../../../../../stage/content-healthcheck-descriptor.json
      register: content_health_check_descriptor_stat_result
      tags:
      - create

    - name: Upload content-healthcheck-descriptor from stage directory to data bucket when supplied
      aws_s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}/content-healthcheck-descriptor.json"
        src: ../../../../../stage/content-healthcheck-descriptor.json
        mode: put
      when: content_health_check_descriptor_stat_result.stat.exists == True
      tags:
      - create

    - name: Generate Hieradata configuration
      template:
        src: ../../../../../templates/ansible/stack-provisioner-hieradata.j2
        dest: ../../../../../stage/stack-provisioner-hieradata.yaml
        mode: 0644
      tags:
      - create

    - name: Upload Hieradata configuration
      aws_s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}/data/local.yaml"
        src: ../../../../../stage/stack-provisioner-hieradata.yaml
        mode: put
        encrypt: yes
      tags:
      - create

    - name: Copy AEM Stack Provisioner from library to data bucket
      s3_copy_object:
        src_bucket: "{{ s3.data_bucket_name }}"
        src_key: "library/aem-aws-stack-provisioner-{{ library.aem_aws_stack_provisioner_version }}.tar.gz"
        dest_bucket: "{{ s3.data_bucket_name }}"
        dest_key: "{{ stack_prefix }}/aem-aws-stack-provisioner-{{ library.aem_aws_stack_provisioner_version }}.tar.gz"
      tags:
      - create

    - name: Copy AEM Orchestrator from library to data bucket
      s3_copy_object:
        src_bucket: "{{ s3.data_bucket_name }}"
        src_key: "library/aem-orchestrator-{{ library.aem_orchestrator_version }}.jar"
        dest_bucket: "{{ s3.data_bucket_name }}"
        dest_key: "{{ stack_prefix }}/aem-orchestrator-{{ library.aem_orchestrator_version }}.jar"
      tags:
      - create

    - name: Copy AEM Password Reset from library to data bucket
      s3_copy_object:
        src_bucket: "{{ s3.data_bucket_name }}"
        src_key: "library/aem-password-reset-content-{{ library.aem_password_reset_version }}.zip"
        dest_bucket: "{{ s3.data_bucket_name }}"
        dest_key: "{{ stack_prefix }}/aem-password-reset-content-{{ library.aem_password_reset_version }}.zip"
      tags:
      - create

    - name: Copy Oak run from library to data bucket
      s3_copy_object:
        src_bucket: "{{ s3.data_bucket_name }}"
        src_key: "library/oak-run-{{ library.oak_run_version }}.jar"
        dest_bucket: "{{ s3.data_bucket_name }}"
        dest_key: "{{ stack_prefix }}/oak-run-{{ library.oak_run_version }}.jar"
      tags:
      - create

    - name: Copy Simian Army from library to data bucket
      s3_copy_object:
        src_bucket: "{{ s3.data_bucket_name }}"
        src_key: "library/simianarmy-{{ library.simian_army_version }}.war"
        dest_bucket: "{{ s3.data_bucket_name }}"
        dest_key: "{{ stack_prefix }}/simianarmy-{{ library.simian_army_version }}.war"
      tags:
      - create

    - name: Copy AEM Healthcheck Content from library to data bucket
      s3_copy_object:
        src_bucket: "{{ s3.data_bucket_name }}"
        src_key: "library/aem-healthcheck-content-{{ library.aem_healthcheck_version }}.zip"
        dest_bucket: "{{ s3.data_bucket_name }}"
        dest_key: "{{ stack_prefix }}/aem-healthcheck-content-{{ library.aem_healthcheck_version }}.zip"
      when: aem.enable_reconfiguration == True
      tags:
      - create

    - name: Check that custom AEM Stack Provisioner exists
      stat:
        path: ../../../../../stage/aem-custom-stack-provisioner.tar.gz
      register: custom_provisioner_stat_result
      tags:
      - create

    - name: Upload custom AEM Stack Provisioner
      aws_s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}/aem-custom-stack-provisioner.tar.gz"
        src: ../../../../../stage/aem-custom-stack-provisioner.tar.gz
        mode: put
      when: custom_provisioner_stat_result.stat.exists == True
      tags:
      - create

    - name: Delete temporary file containing generated credentials
      file:
        path: ../../../../../stage/system-users-credentials.json
        state: absent
      tags:
        - delete

    - name: Delete system user credentials from S3 bucket
      aws_s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}/system-users-credentials.json"
        mode: delobj
      tags:
        - delete

    - debug:
        msg: "Stack data will purged as part of prerequisite resource deletion"
      tags:
        - delete
