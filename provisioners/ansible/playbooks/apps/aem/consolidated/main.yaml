---
- name: AEM Consolidated Main Creation and Deletion Tasks
  hosts: all
  gather_facts: no
  connection: local

  tasks:
    - name: Create AEM Author Publish Dispatcher Stack
      cloudformation:
        stack_name: "{{ stack_prefix }}-{{ main.stack_name }}"
        region: "{{ aws.region }}"
        state: present
        disable_rollback: true
        template: "../../../../../../templates/cloudformation/apps/aem/consolidated/main.yaml"
        template_parameters:
          AemAwsStackProvisionerVersionParameter: "{{ library.aem_aws_stack_provisioner_version }}"
          AuthorDataVolSnapshotParameter: "{{ snapshots.author.data_vol_snapshot_id }}"
          AssociatePublicIpAddressParameter: "{{ author_publish_dispatcher.associate_public_ip_address }}"
          AuthorPublishDispatcherDNSRecordSetNameParameter: "{{ dns_records.author_publish_dispatcher.record_set_name }}"
          AuthorPublishDispatcherImageParameter: "{{ ami_ids.author_publish_dispatcher }}"
          AuthorPublishDispatcherInstanceTypeParameter: "{{ author_publish_dispatcher.instance_type }}"
          AuthorPublishDispatcherVolParameter: "{{ author_publish_dispatcher.root_vol_size }}, {{ author_publish_dispatcher.data_vol_size }}, {{ snapshots.author.use_data_vol_snapshot | lower }}, {{ snapshots.publish.use_data_vol_snapshot | lower }}, {{ author_publish_dispatcher.enable_vol_encryption | lower }}, {{ snapshots.publish_dispatcher.use_data_vol_snapshot | lower }}"
          AWSEncryptionParameters: "{{ aws.encryption.ebs_volume.enable | lower }}, {{ aws.encryption.ebs_volume.kms_key_id }}"
          ComputeKeyPairNameParameter: "{{ compute.key_pair_name }}"
          PublishDispatcherDataVolSnapshotParameter: "{{ snapshots.publish_dispatcher.data_vol_snapshot_id }}"
          DNSRecordSetTTL: "{{ dns_records.author_publish_dispatcher.ttl }}"
          DataBucketNameParameter: "{{ s3.data_bucket_name }}"
          MainStackPrefixParameter: "{{ stack_prefix }}"
          NetworkStackPrefixParameter: "{{ network_stack_prefix }}"
          PrerequisitesStackPrefixParameter: "{{ prerequisites_stack_prefix }}"
          PublishDataVolSnapshotParameter: "{{ snapshots.publish.data_vol_snapshot_id }}"
          Route53HostedZoneNameParameter: "{{ dns_records.route53_hosted_zone_name }}"
          ImageDevices: "{{ ami_device[os_type].root_name }}, {{ ami_device[os_type].author_data_name }}, {{ ami_device[os_type].publish_data_name }}, {{ ami_device[os_type].publish_dispatcher_data_name }}"
      tags:
      - create
      when:
        permission_type == "b"

    - name: Create AEM Author Publish Dispatcher Stack
      cloudformation:
        stack_name: "{{ stack_prefix }}-{{ main.stack_name }}"
        region: "{{ aws.region }}"
        state: present
        disable_rollback: true
        template: "../../../../../../templates/cloudformation/apps/aem/consolidated/main-{{ permission_type }}.yaml"
        template_parameters:
          AemAwsStackProvisionerVersionParameter: "{{ library.aem_aws_stack_provisioner_version }}"
          AuthorDataVolSnapshotParameter: "{{ snapshots.author.data_vol_snapshot_id }}"
          AssociatePublicIpAddressParameter: "{{ author_publish_dispatcher.associate_public_ip_address }}"
          AuthorPublishDispatcherDNSRecordSetNameParameter: "{{ dns_records.author_publish_dispatcher.record_set_name }}"
          AuthorPublishDispatcherImageParameter: "{{ ami_ids.author_publish_dispatcher }}"
          AuthorPublishDispatcherInstanceTypeParameter: "{{ author_publish_dispatcher.instance_type }}"
          AuthorPublishDispatcherVolParameter: "{{ author_publish_dispatcher.root_vol_size }}, {{ author_publish_dispatcher.data_vol_size }}, {{ snapshots.author.use_data_vol_snapshot | lower }}, {{ snapshots.publish.use_data_vol_snapshot | lower }}, {{ author_publish_dispatcher.enable_vol_encryption | lower }}, {{ snapshots.publish_dispatcher.use_data_vol_snapshot | lower }}"
          AWSEncryptionParameters: "{{ aws.encryption.ebs_volume.enable | lower }}, {{ aws.encryption.ebs_volume.kms_key_id }}"
          ComputeKeyPairNameParameter: "{{ compute.key_pair_name }}"
          PublishDispatcherDataVolSnapshotParameter: "{{ snapshots.publish_dispatcher.data_vol_snapshot_id }}"
          DataBucketNameParameter: "{{ s3.data_bucket_name }}"
          MainStackPrefixParameter: "{{ stack_prefix }}"
          NetworkStackPrefixParameter: "{{ network_stack_prefix }}"
          PrerequisitesStackPrefixParameter: "{{ prerequisites_stack_prefix }}"
          PublishDataVolSnapshotParameter: "{{ snapshots.publish.data_vol_snapshot_id }}"
          ImageDevices: "{{ ami_device[os_type].root_name }}, {{ ami_device[os_type].author_data_name }}, {{ ami_device[os_type].publish_data_name }}, {{ ami_device[os_type].publish_dispatcher_data_name }}"
      tags:
      - create
      when:
        permission_type == "c"

    - name: Check if a Stack Exists
      command: >
            aws cloudformation describe-stacks --stack-name "{{ stack_prefix }}-{{ main.stack_name }}"
                --query 'Stacks[].StackName' --region "{{ aws.region }}"
      ignore_errors: True
      register: stack_query
      tags:
        - delete

    - name: Report Stack Problem
      debug:
        msg: Stack "{{ stack_prefix }}-{{ main.stack_name }}" does not exist or some other errors occured
      when:
        "stack_query.rc != 0"
      tags:
        - delete

    - name: Delete AEM Author Publish Dispatcher Stack
      cloudformation:
        stack_name: "{{ stack_prefix }}-{{ main.stack_name }}"
        region: "{{ aws.region }}"
        state: absent
      when:
        "stack_query.rc == 0"
      tags:
      - delete

    - name: Retrieve all available cloudwatch groups to delete
      cloudwatchlogs_log_group_facts:
        log_group_name: "{{ stack_prefix }}"
      register: loggroups_found
      when:
        "stack_query.rc == 0 and aws.cloudwatch.enable_cloudwatch_cleanup"
      tags:
      - delete

    - name: Delete Cloudwatch Loggroups
      cloudwatchlogs_log_group:
        state: absent
        log_group_name: "{{ item.log_group_name}}"
      with_items:
        - "{{ loggroups_found.log_groups }}"
      when:
        "stack_query.rc == 0 and aws.cloudwatch.enable_cloudwatch_cleanup"
      tags:
      - delete
