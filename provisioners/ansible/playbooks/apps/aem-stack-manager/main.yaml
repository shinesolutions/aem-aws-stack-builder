---
- name: AEM Stack Managers Main Resources Creation and Deletion Tasks
  hosts: all
  gather_facts: false
  connection: local
  vars:
    stack_name: "{{ stack_prefix }}-{{ main.stack_name }}"

  tasks:

    - name: Inspect content of data bucket
      aws_s3:
        bucket: "{{ s3.data_bucket_name }}"
        prefix: "{{ stack_prefix }}"
        region: "{{ aws.region }}"
        mode: list
      tags:
        - create

    - name: Upload CloudFormation Templates to S3
      command: >
              aws s3 sync ../../../../../templates/cloudformation/apps/aem-stack-manager
                  s3://{{ s3.data_bucket_name }}/{{ stack_prefix }}
                  --include "*.yaml"
      tags:
        - create

    - name: Generate CloudFormation Template for SSM Documents
      ssm_template:
        dest_file: "{{ playbook_dir }}/../../../../../stage/ssm-commands.yaml"
        ssm_command_cf_template: "{{ playbook_dir }}/../../../../../templates/cloudformation/apps/aem-stack-manager/ssm-commands-template.yaml"
        ssm_commands_dir_cf_template: "{{ playbook_dir }}/../../../../../templates/cloudformation/apps/aem-stack-manager/ssm-commands/"
      tags:
        - create

    - name: Upload SSM Documents CloudFormation Template to S3
      command: >
              aws s3 cp ../../../../../stage/ssm-commands.yaml
                  s3://{{ s3.data_bucket_name }}/{{ stack_prefix }}/ssm-commands.yaml
      tags:
        - create

    - name: Create AEM Stack Manager Main Resources Stack with permission type b
      cloudformation:
        stack_name: "{{ stack_name }}"
        region: "{{ aws.region }}"
        state: present
        disable_rollback: true
        template: "../../../../../templates/cloudformation/apps/aem-stack-manager/main.yaml"
        template_parameters:
          AWSRegion: "{{ aws.region }}"
          MainStackPrefixParameter: "{{ stack_prefix }}"
          DataBucketNameParameter: "{{ s3.data_bucket_name }}"
          S3DataStackManagerPrefix: "{{ stack_prefix }}/{{ stack_manager.s3_prefix }}"
          LiveSnapshotsPurgeSchedule: "{{ stack_manager.purge.live_snapshots.schedule }}"
          LiveSnapshotsPurgeMaxAge: "{{ stack_manager.purge.live_snapshots.max_age_in_hours }}"
          OfflineSnapshotsPurgeSchedule: "{{ stack_manager.purge.offline_snapshots.schedule }}"
          OfflineSnapshotsPurgeMaxAge: " {{ stack_manager.purge.offline_snapshots.max_age_in_hours }}"
          OrchestrationSnapshotsPurgeSchedule: "{{ stack_manager.purge.orchestration_snapshots.schedule }}"
          OrchestrationSnapshotsPurgeMaxAge: "{{ stack_manager.purge.orchestration_snapshots.max_age_in_hours }}"
          CloudWatchS3StreamBucketNameParameter: "{{ stack_manager.cloudwatch_stream.s3_bucket }}"
          CloudWatchS3StreamPrefixParameter: "{{ stack_manager.cloudwatch_stream.s3_prefix }}"
          AWSNotificationParameters: "{{ stack_manager.alarm_notification.contact_email }}, {{ stack_manager.alarm_notification.https_endpoint }}"
          AWSEncryptionParameters: "{{ aws.encryption.dynamo_db.kms_key_id }}, {{ aws.encryption.sns.kms_key_id }}, {{ aws.encryption.lambda.kms_key_arn }}, {{ aws.encryption.sns.managed_policy_arn }}, {{ aws.encryption.dynamo_db.managed_policy_arn }}, {{ aws.encryption.lambda.managed_policy_arn }}, {{ aws.encryption.s3.managed_policy_arn }}"
      tags:
        - create
      when:
        permission_type == "b"

    - name: Create AEM Stack Manager Main Resources Stack with permission type c
      cloudformation:
        stack_name: "{{ stack_name }}"
        region: "{{ aws.region }}"
        state: present
        disable_rollback: true
        template: "../../../../../templates/cloudformation/apps/aem-stack-manager/main-c.yaml"
        template_parameters:
          AWSRegion: "{{ aws.region }}"
          MainStackPrefixParameter: "{{ stack_prefix }}"
          DataBucketNameParameter: "{{ s3.data_bucket_name }}"
          S3DataStackManagerPrefix: "{{ stack_prefix }}/{{ stack_manager.s3_prefix }}"
          LiveSnapshotsPurgeSchedule: "{{ stack_manager.purge.live_snapshots.schedule }}"
          LiveSnapshotsPurgeMaxAge: "{{ stack_manager.purge.live_snapshots.max_age_in_hours }}"
          OfflineSnapshotsPurgeSchedule: "{{ stack_manager.purge.offline_snapshots.schedule }}"
          OfflineSnapshotsPurgeMaxAge: " {{ stack_manager.purge.offline_snapshots.max_age_in_hours }}"
          OrchestrationSnapshotsPurgeSchedule: "{{ stack_manager.purge.orchestration_snapshots.schedule }}"
          OrchestrationSnapshotsPurgeMaxAge: "{{ stack_manager.purge.orchestration_snapshots.max_age_in_hours }}"
          AEMStackManagerLambdaServiceRoleNameParameter: "{{ stack_manager.lambda_service_role_name }}"
          AEMStackManagerLambdaServiceRoleArnParameter: "{{ stack_manager.lambda_service_role_arn }}"
          AEMStackManagerSSMServiceRoleNameParameter: "{{ stack_manager.ssm_service_role_name }}"
          AEMStackManagerSSMServiceRoleArnParameter: "{{ stack_manager.ssm_service_role_arn }}"
          AWSNotificationParameters: "{{ stack_manager.alarm_notification.contact_email }}, {{ stack_manager.alarm_notification.https_endpoint }}"
          AWSEncryptionParameters: "{{ aws.encryption.dynamo_db.kms_key_id }}, {{ aws.encryption.sns.kms_key_id }}, {{ aws.encryption.lambda.kms_key_arn }}, {{ aws.encryption.sns.managed_policy_arn }}, {{ aws.encryption.dynamo_db.managed_policy_arn }}, {{ aws.encryption.s3.managed_policy_arn }}"
      tags:
        - create
      when:
        permission_type == "c"

    - name: Gather all stack information
      cloudformation_facts:
        stack_name: "{{ stack_name }}"
        region: "{{ aws.region }}"
        all_facts: true
      register: stack_info
      tags:
        - create
        - delete

    - name: "Save found stack infos"
      set_fact:
        stack_found: true
        instance_profile_stack_name: "{{ stack_info.ansible_facts.cloudformation[stack_name].stack_resources.InstanceProfilesStack.split('/')[1] }}"
        stack_manager_main_stack_name: "{{ stack_info.ansible_facts.cloudformation[stack_name].stack_resources.StackManagerStack.split('/')[1] }}"
        ssm_document_stack_name: "{{ stack_info.ansible_facts.cloudformation[stack_name].stack_resources.SSMCommandsStack.split('/')[1] }}"
      when:
        "(stack_info.ansible_facts.cloudformation | length > 0)"
      tags:
        - create
        - delete

    - name: Gather AEM Instance Profile stack information
      cloudformation_facts:
        stack_name: "{{ instance_profile_stack_name }}"
        region: "{{ aws.region }}"
        all_facts: true
      register: instance_profile_stack_info
      when: instance_profile_stack_name is defined
      tags:
        - create
        - delete

    - name: Gather AEM Stack Manager Main stack information
      cloudformation_facts:
        stack_name: "{{ stack_manager_main_stack_name }}"
        region: "{{ aws.region }}"
        all_facts: true
      register: stack_manager_main_stack_info
      when: stack_manager_main_stack_name is defined
      tags:
        - create
        - delete

    - name: Create Stack Manager configuration
      stack_manager_config:
        region: "{{ aws.region }}"
        SSM_stack_name: "{{ ssm_document_stack_name }}"
        S3Bucket: "{{ s3.data_bucket_name }}"
        S3Folder: "{{ stack_prefix }}/{{ stack_manager.s3_prefix }}"
        TaskStatusTopicArn: "{{ stack_manager_main_stack_info.ansible_facts.cloudformation[stack_manager_main_stack_name].stack_outputs.TaskStatusTopicArn }}"
        SSMServiceRoleArn: "{{ instance_profile_stack_info.ansible_facts.cloudformation[instance_profile_stack_name].stack_outputs.AEMStackManagerSSMServiceRoleArn }}"
        S3BucketSSMOutput: "{{ s3.data_bucket_name }}"
        S3PrefixSSMOutput: "{{ stack_prefix }}/{{ stack_manager.s3_prefix }}/SSMOutput"
        BackupTopicArn: "{{ stack_manager_main_stack_info.ansible_facts.cloudformation[stack_manager_main_stack_name].stack_outputs.BackupTopicArn }}"
        DynamoDBTableName: "{{ stack_manager_main_stack_info.ansible_facts.cloudformation[stack_manager_main_stack_name].stack_outputs.AemStackManagerTableName }}"
        MinimumPublishInstances: "{{ stack_manager.publish.asg_min_size }}"
        S3BucketCWStream: "{{ stack_manager.cloudwatch_stream.s3_bucket }}"
        S3PrefixCWStream: "{{ stack_manager.cloudwatch_stream.s3_prefix }}"
        state: present
      tags:
        - create

    - name: "Grant permissions for AEM Stack Manager Service Roles to use SNS CMK for permission type b"
      aws_kms:
        key_id: "{{ aws.encryption.sns.kms_key_id }}"
        grants:
          - name: "{{ stack_prefix }}-{{ item }}-Grants"
            grantee_principal: "{{ item }}"
            operations:
              - Encrypt
              - Decrypt
              - DescribeKey
              - GenerateDataKey
              - ReEncryptFrom
              - ReEncryptTo
      with_items:
        - "{{ stack_manager_main_stack_info.ansible_facts.cloudformation[stack_manager_main_stack_name].stack_outputs.LambdaServiceRoleArn }}"
        - "{{ instance_profile_stack_info.ansible_facts.cloudformation[instance_profile_stack_name].stack_outputs.AEMStackManagerSSMServiceRoleArn }}"
      when: permission_type == "b" and aws.encryption.sns.kms_key_id != 'overwrite-me' and aws.encryption.sns.managed_policy_arn == 'overwrite-me'
      tags:
        - create

    - name: "Grant permissions for AEM Stack Manager Service Roles to use DynamoDB CMK for permission type b"
      aws_kms:
        key_id: "{{ aws.encryption.dynamo_db.kms_key_id }}"
        grants:
          - name: "{{ stack_prefix }}-{{ item }}-Grants"
            grantee_principal: "{{ item }}"
            operations:
              - Encrypt
              - Decrypt
              - DescribeKey
              - GenerateDataKey
              - ReEncryptFrom
              - ReEncryptTo
              - RetireGrant
      with_items:
        - "{{ stack_manager_main_stack_info.ansible_facts.cloudformation[stack_manager_main_stack_name].stack_outputs.LambdaServiceRoleArn }}"
      when: permission_type == "b" and aws.encryption.dynamo_db.kms_key_id != 'overwrite-me' and aws.encryption.dynamo_db.managed_policy_arn == 'overwrite-me'
      tags:
        - create

    - name: "Grant permissions for AEM Stack Manager Service Roles to use S3 CMK for permission type b"
      aws_kms:
        key_id: "{{ aws.encryption.s3.kms_key_id }}"
        grants:
          - name: "{{ stack_prefix }}-{{ item }}-Grants"
            grantee_principal: "{{ item }}"
            operations:
              - Encrypt
              - Decrypt
              - DescribeKey
              - GenerateDataKey
              - ReEncryptFrom
              - ReEncryptTo
              - RetireGrant
      with_items:
        - "{{ stack_manager_main_stack_info.ansible_facts.cloudformation[stack_manager_main_stack_name].stack_outputs.LambdaServiceRoleArn }}"
        - "{{ instance_profile_stack_info.ansible_facts.cloudformation[instance_profile_stack_name].stack_outputs.AEMStackManagerSSMServiceRoleArn }}"
      when: permission_type == "b" and aws.encryption.s3.kms_key_id != 'overwrite-me' and aws.encryption.s3.managed_policy_arn == 'overwrite-me'
      tags:
        - create

    - name: "Grant permissions for AEM Stack Manager Service Roles to use Lambda CMK for permission type b"
      aws_kms:
        key_id: "{{ aws.encryption.lambda.kms_key_arn }}"
        grants:
          - name: "{{ stack_prefix }}-{{ item }}-Grants"
            grantee_principal: "{{ item }}"
            operations:
              - Encrypt
              - Decrypt
              - DescribeKey
              - GenerateDataKey
              - ReEncryptFrom
              - ReEncryptTo
              - RetireGrant
      with_items:
        - "{{ stack_manager_main_stack_info.ansible_facts.cloudformation[stack_manager_main_stack_name].stack_outputs.LambdaServiceRoleArn }}"
      when: permission_type == "b" and aws.encryption.lambda.kms_key_arn != 'overwrite-me' and aws.encryption.lambda.managed_policy_arn == 'overwrite-me'
      tags:
        - create

    - name: Report Stack Problem
      debug:
        msg: Stack "{{ stack_name }}" does not exist or some other errors occured
      when: stack_found is undefined
      tags:
        - delete

    - name: "Gather information for SNS CMK"
      aws_kms_facts:
        filters:
          key-id: "{{ aws.encryption.sns.kms_key_id.split('/')[1] }}"
      when: stack_found is defined and permission_type == "b" and aws.encryption.sns.kms_key_id != 'overwrite-me' and aws.encryption.sns.managed_policy_arn == 'overwrite-me'
      register: kms_sns_facts
      tags:
        - delete

    - name: "Save found SNS CMK Details"
      set_fact:
        kms_sns_key_grants: "{{ kms_sns_facts['keys'][0].grants }}"
      when: "'keys' in kms_sns_facts and (kms_sns_facts['keys'] | length > 0)"
      tags:
        - delete

    - name: "Remove granted permissions for AEM Stack Manager Service Roles to use SNS CMK"
      command: >
              aws kms revoke-grant
                --key-id "{{ aws.encryption.sns.kms_key_id }}"
                --grant-id "{{ item.grant_id }}"
      with_items:
        - "{{ kms_sns_key_grants }}"
      when: (kms_sns_key_grants is defined and item.grantee_principal == stack_manager_main_stack_info.ansible_facts.cloudformation[stack_manager_main_stack_name].stack_outputs.LambdaServiceRoleArn) or
            (kms_sns_key_grants is defined and item.grantee_principal == instance_profile_stack_info.ansible_facts.cloudformation[instance_profile_stack_name].stack_outputs.AEMStackManagerSSMServiceRoleArn)
      tags:
        - delete

    - name: "Gather information for DynamoDB CMK"
      aws_kms_facts:
        filters:
          key-id: "{{ aws.encryption.dynamo_db.kms_key_id.split('/')[1] }}"
      when: stack_found is defined and permission_type == "b" and aws.encryption.dynamo_db.kms_key_id != 'overwrite-me' and aws.encryption.dynamo_db.managed_policy_arn == 'overwrite-me'
      register: kms_dynamodb_facts
      tags:
        - delete

    - name: "Save found DynamoDB CMK Details"
      set_fact:
        kms_dynamo_db_key_grants: "{{ kms_dynamodb_facts['keys'][0].grants }}"
      when: "'keys' in kms_dynamodb_facts and (kms_dynamodb_facts['keys'] | length > 0)"
      tags:
        - delete

    - name: "Remove granted permissions for AEM Stack Manager Service Roles to use DynamoDB CMK"
      command: >
              aws kms revoke-grant
                --key-id "{{ aws.encryption.dynamo_db.kms_key_id }}"
                --grant-id "{{ item.grant_id }}"
      with_items:
        - "{{ kms_dynamo_db_key_grants }}"
      when: (kms_dynamo_db_key_grants is defined and item.grantee_principal == stack_manager_main_stack_info.ansible_facts.cloudformation[stack_manager_main_stack_name].stack_outputs.LambdaServiceRoleArn)
      tags:
        - delete

    - name: "Gather information for Lambda CMK"
      aws_kms_facts:
        filters:
          key-id: "{{ aws.encryption.lambda.kms_key_arn.split('/')[1] }}"
      when: stack_found is defined and permission_type == "b" and aws.encryption.lambda.kms_key_arn != 'overwrite-me' and aws.encryption.lambda.managed_policy_arn == 'overwrite-me'
      register: kms_lambda_facts
      tags:
        - delete

    - name: "Save found Lambda CMK Details"
      set_fact:
        kms_lambda_key_grants: "{{ kms_lambda_facts['keys'][0].grants }}"
      when: "'keys' in kms_lambda_facts and (kms_lambda_facts['keys'] | length > 0)"
      tags:
        - delete

    - name: "Remove granted permissions for AEM Stack Manager Service Roles to use Lambda CMK"
      command: >
              aws kms revoke-grant
                --key-id "{{ aws.encryption.lambda.kms_key_arn }}"
                --grant-id "{{ item.grant_id }}"
      with_items:
        - "{{ kms_lambda_key_grants }}"
      when: (kms_lambda_key_grants is defined and item.grantee_principal == stack_manager_main_stack_info.ansible_facts.cloudformation[stack_manager_main_stack_name].stack_outputs.LambdaServiceRoleArn)
      tags:
        - delete

    - name: "Gather information for S3 CMK"
      aws_kms_facts:
        filters:
          key-id: "{{ aws.encryption.s3.kms_key_id.split('/')[1] }}"
      when: stack_found is defined and permission_type == "b" and aws.encryption.s3.kms_key_id != 'overwrite-me' and aws.encryption.s3.managed_policy_arn == 'overwrite-me'
      register: kms_s3_facts
      tags:
        - delete

    - name: "Save found S3 CMK Details"
      set_fact:
        kms_s3_key_grants: "{{ kms_s3_facts['keys'][0].grants }}"
      when: "'keys' in kms_s3_facts and (kms_s3_facts['keys'] | length > 0)"
      tags:
        - delete

    - name: "Remove granted permissions for AEM App Instance Roles to use S3 CMK"
      command: >
              aws kms revoke-grant
                --key-id "{{ aws.encryption.s3.kms_key_id }}"
                --grant-id "{{ item.grant_id }}"
      with_items:
        - "{{ kms_s3_key_grants }}"
      when: (kms_s3_key_grants is defined and item.grantee_principal == stack_manager_main_stack_info.ansible_facts.cloudformation[stack_manager_main_stack_name].stack_outputs.LambdaServiceRoleArn) or
            (kms_s3_key_grants is defined and item.grantee_principal == instance_profile_stack_info.ansible_facts.cloudformation[instance_profile_stack_name].stack_outputs.AEMStackManagerSSMServiceRoleArn)
      tags:
        - delete

    - name: Delete AEM Stack Manager Main Resources Stacks
      cloudformation:
        stack_name: "{{ stack_name }}"
        region: "{{ aws.region }}"
        state: absent
      when: stack_found is defined
      tags:
        - delete

    - name: Delete All Stack Data
      command: >
              aws s3 rm s3://"{{ s3.data_bucket_name }}"/"{{ stack_prefix }}"/"{{ stack_manager.s3_prefix }}"
               --recursive --region "{{ aws.region }}"
      tags:
        - delete
