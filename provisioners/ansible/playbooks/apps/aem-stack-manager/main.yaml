---
- name: AEM Stack Managers Main Resources Creation and Deletion Tasks
  hosts: all
  gather_facts: false
  connection: local

  tasks:

    - name: Inspect content of data bucket
      aws_s3:
        bucket: "{{ s3.data_bucket_name }}"
        prefix: "{{ stack_prefix }}"
        region: "{{ aws.region }}"
        mode: list
      tags:
        - create

    - name: Upload CloudFormation Templates to S3
      command: >
              aws s3 sync ../../../../../templates/cloudformation/apps/aem-stack-manager
                  s3://{{ s3.data_bucket_name }}/{{ stack_prefix }}
                  --include "*.yaml"
      tags:
        - create

    - name: Generate CloudFormation Template for SSM Documents
      ssm_template:
        dest_file: "{{ playbook_dir }}/../../../../../stage/ssm-commands.yaml"
        ssm_command_cf_template: "{{ playbook_dir }}/../../../../../templates/cloudformation/apps/aem-stack-manager/ssm-commands-template.yaml"
        ssm_commands_dir_cf_template: "{{ playbook_dir }}/../../../../../templates/cloudformation/apps/aem-stack-manager/ssm-commands/"
      tags:
        - create

    - name: Upload SSM Documents CloudFormation Template to S3
      command: >
              aws s3 cp ../../../../../stage/ssm-commands.yaml
                  s3://{{ s3.data_bucket_name }}/{{ stack_prefix }}/ssm-commands.yaml
      tags:
        - create

    - name: Create AEM Stack Manager Main Resources Stack with permission type b
      cloudformation:
        stack_name: "{{ stack_prefix }}-{{ main.stack_name }}"
        region: "{{ aws.region }}"
        state: present
        disable_rollback: true
        template: "../../../../../templates/cloudformation/apps/aem-stack-manager/main.yaml"
        template_parameters:
          AWSRegion: "{{ aws.region }}"
          MainStackPrefixParameter: "{{ stack_prefix }}"
          DataBucketNameParameter: "{{ s3.data_bucket_name }}"
          S3DataStackManagerPrefix: "{{ stack_prefix }}/{{ stack_manager.s3_prefix }}"
          LiveSnapshotsPurgeSchedule: "{{ stack_manager.purge.live_snapshots.schedule }}"
          LiveSnapshotsPurgeMaxAge: "{{ stack_manager.purge.live_snapshots.max_age_in_hours }}"
          OfflineSnapshotsPurgeSchedule: "{{ stack_manager.purge.offline_snapshots.schedule }}"
          OfflineSnapshotsPurgeMaxAge: " {{ stack_manager.purge.offline_snapshots.max_age_in_hours }}"
          OrchestrationSnapshotsPurgeSchedule: "{{ stack_manager.purge.orchestration_snapshots.schedule }}"
          OrchestrationSnapshotsPurgeMaxAge: "{{ stack_manager.purge.orchestration_snapshots.max_age_in_hours }}"
          AEMCWEventNotificationEmail: "{{ stack_manager.alarm_notification.contact_email }}"
          CloudWatchS3StreamBucketNameParameter: "{{ stack_manager.cloudwatch_stream.s3_bucket }}"
          CloudWatchS3StreamPrefixParameter: "{{ stack_manager.cloudwatch_stream.s3_prefix }}"
      register: main_stack_info
      tags:
        - create
      when:
        permission_type == "b"

    - cloudformation_facts:
        stack_name: "{{ main_stack_info.stack_resources[3].physical_resource_id.split('/')[1] }}"
        region: "{{ aws.region }}"
        all_facts: true
      register: stack_manager_stack_info
      tags:
        - create
      when:
        permission_type == "b"

    - name: Create Stack Manager configuration
      stack_manager_config:
        region: "{{ aws.region }}"
        SSM_stack_name: "{{ main_stack_info.stack_resources[2].physical_resource_id.split('/')[1] }}"
        S3Bucket: "{{ s3.data_bucket_name }}"
        S3Folder: "{{ stack_prefix }}/{{ stack_manager.s3_prefix }}"
        TaskStatusTopicArn: "{{ stack_manager_stack_info.ansible_facts.cloudformation[main_stack_info.stack_resources[3].physical_resource_id.split('/')[1]].stack_outputs.TaskStatusTopicArn }}"
        SSMServiceRoleArn: "{{ stack_manager_stack_info.ansible_facts.cloudformation[main_stack_info.stack_resources[3].physical_resource_id.split('/')[1]].stack_outputs.SSMServiceRoleArn }}"
        S3BucketSSMOutput: "{{ s3.data_bucket_name }}"
        S3PrefixSSMOutput: "{{ stack_prefix }}/{{ stack_manager.s3_prefix }}/SSMOutput"
        BackupTopicArn: "{{ stack_manager_stack_info.ansible_facts.cloudformation[main_stack_info.stack_resources[3].physical_resource_id.split('/')[1]].stack_outputs.BackupTopicArn }}"
        DynamoDBTableName: "{{ stack_manager_stack_info.ansible_facts.cloudformation[main_stack_info.stack_resources[3].physical_resource_id.split('/')[1]].stack_outputs.AemStackManagerTableName }}"
        MinimumPublishInstances: "{{ publish.asg_min_size }}"
        S3BucketCWStream: "{{ stack_manager.cloudwatch_stream.s3_bucket }}"
        S3PrefixCWStream: "{{ stack_manager.cloudwatch_stream.s3_prefix }}"
        state: present
      tags:
        - create
      when:
        permission_type == "b"

    - name: Create AEM Stack Manager Main Resources Stack with permission type c
      cloudformation:
        stack_name: "{{ stack_prefix }}-{{ main.stack_name }}"
        region: "{{ aws.region }}"
        state: present
        disable_rollback: true
        template: "../../../../../templates/cloudformation/apps/aem-stack-manager/main-c.yaml"
        template_parameters:
          AWSRegion: "{{ aws.region }}"
          MainStackPrefixParameter: "{{ stack_prefix }}"
          DataBucketNameParameter: "{{ s3.data_bucket_name }}"
          S3DataStackManagerPrefix: "{{ stack_prefix }}/{{ stack_manager.s3_prefix }}"
          LiveSnapshotsPurgeSchedule: "{{ stack_manager.purge.live_snapshots.schedule }}"
          LiveSnapshotsPurgeMaxAge: "{{ stack_manager.purge.live_snapshots.max_age_in_hours }}"
          OfflineSnapshotsPurgeSchedule: "{{ stack_manager.purge.offline_snapshots.schedule }}"
          OfflineSnapshotsPurgeMaxAge: " {{ stack_manager.purge.offline_snapshots.max_age_in_hours }}"
          OrchestrationSnapshotsPurgeSchedule: "{{ stack_manager.purge.orchestration_snapshots.schedule }}"
          OrchestrationSnapshotsPurgeMaxAge: "{{ stack_manager.purge.orchestration_snapshots.max_age_in_hours }}"
          AEMStackManagerLambdaServiceRoleNameParameter: "{{ stack_manager.lambda_service_role_name }}"
          AEMStackManagerLambdaServiceRoleArnParameter: "{{ stack_manager.lambda_service_role_arn }}"
          AEMStackManagerSSMServiceRoleNameParameter: "{{ stack_manager.ssm_service_role_name }}"
          AEMStackManagerSSMServiceRoleArnParameter: "{{ stack_manager.ssm_service_role_arn }}"
          AEMCWEventNotificationEmail: "{{ stack_manager.alarm_notification.contact_email }}"
      register: main_stack_info
      tags:
        - create
      when:
        permission_type == "c"

    - cloudformation_facts:
        stack_name: "{{ main_stack_info.stack_resources[3].physical_resource_id.split('/')[1] }}"
        region: "{{ aws.region }}"
        all_facts: true
      register: stack_manager_stack_info
      tags:
        - create
      when:
        permission_type == "c"

    - name: Create Stack Manager configuration
      stack_manager_config:
        region: "{{ aws.region }}"
        SSM_stack_name: "{{ main_stack_info.stack_resources[2].physical_resource_id.split('/')[1] }}"
        S3Bucket: "{{ s3.data_bucket_name }}"
        S3Folder: "{{ stack_prefix }}/{{ stack_manager.s3_prefix }}"
        TaskStatusTopicArn: "{{ stack_manager_stack_info.ansible_facts.cloudformation[main_stack_info.stack_resources[3].physical_resource_id.split('/')[1]].stack_outputs.TaskStatusTopicArn }}"
        SSMServiceRoleArn: "{{ stack_manager_stack_info.ansible_facts.cloudformation[main_stack_info.stack_resources[3].physical_resource_id.split('/')[1]].stack_outputs.SSMServiceRoleArn }}"
        S3BucketSSMOutput: "{{ s3.data_bucket_name }}"
        S3PrefixSSMOutput: "{{ stack_prefix }}/{{ stack_manager.s3_prefix }}/SSMOutput"
        BackupTopicArn: "{{ stack_manager_stack_info.ansible_facts.cloudformation[main_stack_info.stack_resources[3].physical_resource_id.split('/')[1]].stack_outputs.BackupTopicArn }}"
        DynamoDBTableName: "{{ stack_manager_stack_info.ansible_facts.cloudformation[main_stack_info.stack_resources[3].physical_resource_id.split('/')[1]].stack_outputs.AemStackManagerTableName }}"
        MinimumPublishInstances: "{{ publish.asg_min_size }}"
        state: present
      tags:
        - create
      when:
        permission_type == "c"

    - name: Check if a Stack Exists
      command: >
        aws cloudformation describe-stacks --stack-name "{{ stack_prefix }}-{{ main.stack_name }}"
             --query 'Stacks[].StackName' --region "{{ aws.region }}"
      ignore_errors: true
      register: stack_query
      tags:
        - delete

    - name: Report Stack Problem
      debug:
        msg: Stack "{{ stack_prefix }}-{{ main.stack_name }}" does not exist or some other errors occured
      when:
        "stack_query.rc != 0"
      tags:
        - delete

    - name: Delete AEM Stack Manager Main Resources Stacks
      cloudformation:
        stack_name: "{{ stack_prefix }}-{{ main.stack_name }}"
        region: "{{ aws.region }}"
        state: absent
      when:
        "stack_query.rc == 0"
      tags:
        - delete

    - name: Delete All Stack Data
      command: >
              aws s3 rm s3://"{{ s3.data_bucket_name }}"/"{{ stack_prefix }}"/"{{ stack_manager.s3_prefix }}"
               --recursive --region "{{ aws.region }}"
      tags:
        - delete
